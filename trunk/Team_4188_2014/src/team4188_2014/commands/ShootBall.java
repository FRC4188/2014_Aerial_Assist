// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package team4188_2014.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import team4188_2014.CorpsLog;
import team4188_2014.Robot;
import team4188_2014.RobotMap;
/**
 *
 */
public class  ShootBall extends Command{
    public ShootBall() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    private boolean deployed = false;
    private boolean gateLatchReady = false;
    private boolean doneYet1 = false;
    private boolean doneYet2 = false;
    private boolean doneYet3 = false;
    private Timer timer;
    private final double TIME_1 = 1.0;
    private final double TIME_2 = 6.0;
    private final double TIME_3 = 7.1;
    private final double TIME_4 = 8.2;

    // Called just before this Command runs the first time
    protected void initialize() {
        timer = new Timer();
        timer.start();  
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        //Step 1: Deploy the Retriever to get it out of the way if it is not already deployed.
       if(Robot.retriever.isRetracted()) Robot.retriever.deployRetriever();
       else Robot.retriever.doNothing();
       
       //Step 2A: Deploy the Shooter and reset if the limit switch is clicked and the tension has been released.
       if((!Robot.shooter.getGateLatch() && Robot.shooter.isExtended()) || deployed){
           //Step 3A: Deploy shooter if not already deployed.
           if(!deployed) {
                CorpsLog.log("Teleop", "Shooting...", false, true);
                Robot.shooter.deployShooter();
                deployed = true;
           }
           
           //Step 3B: If shooter is already deployed, begin reset.
           else{
               CorpsLog.log("Teleop", "Resetting Shooter...", false, true);
               
               //Step 4: If 1 second has passed and shooter has not been retracted, retract shooter.
               if(timer.get() >= TIME_1 && timer.get() < TIME_2 && !doneYet1){
                   CorpsLog.log("Teleop", "Retracting Shooter...", false, true);
                   Robot.shooter.retractShooter();
                   doneYet1 = true;
               }          
               
               //Step 5: If 6 seconds have passed and the gate latch has not been locked, lock gate latch.
               else if(timer.get() >= TIME_2 && timer.get() < TIME_3 && !doneYet2){ 
                   //Only set the gate latch if the limit switch is pressed.
                   if(!Robot.shooter.getGateLatch()){
                       CorpsLog.log("Teleop", "Setting Gate Latch...", false, true);
                       Robot.shooter.gateLatchReady();
                       doneYet2 = true;
                   }
                   else {
                       CorpsLog.log("Teleop", "Limit switch not clicked... Cannot lock gate latch...", false, true);
                       Robot.shooter.doNothing();
                       //doneYet2 is still false.
                   }
               }
               
               //Step 6: If 7 seconds has passed and tension has not been released, release shooter tension.
               else if(timer.get() >= TIME_3 && timer.get() <TIME_4 && !doneYet3){
                   if(doneYet2){
                       CorpsLog.log("Teleop", "Releasing Shooter Tension... Sequence finished... Exiting command 'ShootBall()'", false, true);
                       Robot.shooter.releaseTension();
                       doneYet3 = true;
                   }
                   else{
                       Robot.shooter.doNothing();
                       CorpsLog.log("Teleop", "Gate Latch unlocked... Cannot release tension... Exiting command 'ShootBall()'", false, true);
                       doneYet1 = true;
                       doneYet2 = true;
                       doneYet3 = true;
                   }
               }
               
               //In the event that none of these above 3 cases is true, wait.
               else Robot.shooter.doNothing();
           }
       }
       
       //Step 2B: If the Limit switch is clicked but the shooter tension has not been released, 
       //lock gate latch just in case and release shooter tension. Press trigger again to shoot.
       else if(!Robot.shooter.getGateLatch() && Robot.shooter.isRetracted()){
           if(!gateLatchReady){
               CorpsLog.log("Teleop", "Locking Gate Latch...", false, true);
               Robot.shooter.gateLatchReady();
               gateLatchReady = true;
           }
           else{
               if(timer.get() >= TIME_1){
                   CorpsLog.log("Teleop", "Releasing Tension...", false, true);
                   Robot.shooter.releaseTension();
                   CorpsLog.log("Teleop", "Press trigger again to shoot...", false, true);
                   doneYet1 = true;
                   doneYet2 = true;
                   doneYet3 = true; 
               }
               else Robot.shooter.doNothing();
           }
       }
       
       //Step 2C: If the Limit switch is not clicked at all, retract shooter and press trigger again.
       else {
           Robot.shooter.deployShooter();
           CorpsLog.log("Teleop", "Limit Switch not clicked... Attempting retract shooter", false, true);
           Robot.shooter.retractShooter();
           CorpsLog.log("Teleop", "Wait for limit switch and press trigger again to lock gate latch and release tension...", false, true);
           doneYet1 = true;
           doneYet2 = true;
           doneYet3 = true;        
       }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return doneYet1 && doneYet2 && doneYet3;
    }
    // Called once after isFinished returns true
    protected void end() {
        gateLatchReady = false;
        deployed = false;
        doneYet1 = false;
        doneYet2 = false;
        doneYet3 = false;
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {}

}
