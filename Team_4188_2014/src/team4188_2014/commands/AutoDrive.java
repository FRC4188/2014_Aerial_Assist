// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package team4188_2014.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import team4188_2014.Robot;

/**
 *
 */
public class  AutoDrive extends Command {

    public AutoDrive() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
//        try {
//            double initialRightEncoder = Robot.drivetrain.getRightEncoder();
//            double initialLeftEncoder = Robot.drivetrain.getLeftEncoder();
//            
//            while((Robot.drivetrain.getRightEncoder()- initialRightEncoder)< 1 && (Robot.drivetrain.getLeftEncoder() - initialLeftEncoder) < 1)
                Robot.drivetrain.driveAuto(0, 0.5, 0, 0);
                Timer.delay(2.0);
                Robot.drivetrain.driveAuto(0, 0, 0, 0);
//        } catch (CANTimeoutException ex) {
//            ex.printStackTrace();
//        }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
