// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package team4188_2014.subsystems;
import team4188_2014.RobotMap;
import team4188_2014.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class Shooter extends Subsystem {
    private static final double PNEUMATIC_DELAY_SECONDS = 0.1;
    private static final double ACTUATOR_DELAY_SECONDS = 0.5;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DoubleSolenoid shooterDoubleSolenoid = RobotMap.shooterDoubleSolenoid;
    Compressor compressor = RobotMap.Compressor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Relay linearActuator = RobotMap.shooterRelay;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ShooterDoNothing());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void init(){
        compressor.start();
        linearActuator.set(Relay.Value.kOff);
    }
    
    public void retractShooter(){
        shooterDoubleSolenoid.set(DoubleSolenoid.Value.kForward);    
        Timer.delay(PNEUMATIC_DELAY_SECONDS);
        shooterDoubleSolenoid.set(DoubleSolenoid.Value.kOff); 
    }
    
    public void deployShooter(){
        shooterDoubleSolenoid.set(DoubleSolenoid.Value.kReverse);     
        Timer.delay(PNEUMATIC_DELAY_SECONDS);
        shooterDoubleSolenoid.set(DoubleSolenoid.Value.kOff);
        linearActuator.set(Relay.Value.kForward);
        Timer.delay(ACTUATOR_DELAY_SECONDS);
        linearActuator.set(Relay.Value.kOff);
        Timer.delay(ACTUATOR_DELAY_SECONDS);
        linearActuator.set(Relay.Value.kReverse);
        Timer.delay(ACTUATOR_DELAY_SECONDS);
        linearActuator.set(Relay.Value.kOff);
    }
    
    public void doNothing(){
        shooterDoubleSolenoid.set(DoubleSolenoid.Value.kOff);
    }
}
